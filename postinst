#!/bin/sh

# Made by DiDA for iOSGods.com! - Version 1.0 - Visit https://github.com/iOSGods/Auto-Lipo-Online-Version for an up-to-date version!


#################################################################################

iosgods_binary="/tmp/BINARYNAME"
iosgods_url="http://directdownloadlinktofile.tld/BINARYDOWNLOADLINK"   # URL Download links must be direct download
iosgods_url2="http://directdownloadlinktofile.tld/BINARYDOWNLOADLINK2"  # Backup URL incase the first one fails or is country blocked

iosgods_target_directory="/var/mobile/Containers/Bundle/Application/*/APPNAME.app/"
iosgods_lipoarm64="/usr/bin/LipoARM64NAME"
lipoarm64_binarytarget="BINARYNAME"

#################################################################################


set -e

ig_mv_perms() {
	# Kill the app if it's running before continuing
	killall -9 "${iosgods_binary##*/}" || :
	
    # Check if the specified binary exists in the location provided above, otherwise output an error
    if [ ! -f "${iosgods_binary}" ]; then
        printf "${iosgods_binary} file couldn't be found, please check if the specified location is correct. If the issue still persists, ask for help on iOSGods.com\\n\\n"
        exit 1
    fi

    # Check if there is a '*' character in the target directory variable and process if that's the case
    if [ "${iosgods_target_directory}" != "${iosgods_target_directory%%\***}" ]; then
        base_iosgods_target_directory="${iosgods_target_directory%%\***}"
        prefix_iosgods_target_directory="${iosgods_target_directory##**\*}"

        # Search prefix_iosgods_target_directory on base_iosgods_target_directory directory
        for t in $base_iosgods_target_directory/* ; do
            if [ -d "${t}${prefix_iosgods_target_directory}" ]; then
                # Found, replace iosgods_target_directory with real path
                iosgods_target_directory="${t}${prefix_iosgods_target_directory}"
                break
            else
                continue
            fi
        done
    fi

    if [ ! -d "${iosgods_target_directory}" ]; then
        printf "${iosgods_target_directory} directory wasn't found. Please make sure you have the app installed or ask for support on iOSGods.com\\n\\n"
        exit 1
    fi

    # Changing permissions prior to moving the binary to simplify code
    chmod 755 "${iosgods_binary}"
    chown mobile:mobile "${iosgods_binary}"
	
    # Moving thinned binary to the specified app's directory
    printf "\\n\\n** Applying the hack...\\n"
    mv "${iosgods_binary}" "${iosgods_target_directory}"
}


case "${1}" in
    configure)

        # Read sw_vers output and act upon it
        case "$(sw_vers -productVersion)" in
            5*|6*|7*|8*) # If iOS 5, 6, 7, or 8 is detected, it will run LipoARM64 to patch the binary
                printf "*************************************\\n"
                printf "* iOS 8 or lower has been detected. *\\n"
                printf "*************************************\\n\\n"
		
		# Setting permissions to LipoARM64 before running incase the user added it to the deb with bad permissions
		chmod 755 "${iosgods_lipoarm64}"
		
		printf "** Installing the hack. Please wait...\\n\\n"
		"${iosgods_lipoarm64}" "${lipoarm64_binarytarget}"
		
		# Since iOS 8 or lower has been detected, we no longer need the thinned binary we bundled with the .deb so we remove it to free up space
		rm -f "${iosgods_binary}"
		
                ;;

            9*|10*) # If iOS 9+ is detected, apply the thinned binary
                printf "****************************************\\n"
                printf "* iOS 9.0 or higher has been detected. *\\n"
                printf "****************************************\\n\\n"

				command -v "wget" >/dev/null 2>&1 || {
                    printf "\\n\\n** wget wasn't found, please open Cydia and install 'wget' then try again.\\n\\n"
                        exit 1
                }

                printf "\\n** Downloading the binary patch...\\n\\n"
                if ! wget "${iosgods_url}" -O "${iosgods_binary}"; then
                    printf "\\n\\nDownload failed. Trying the second URL...\\n\\n"
                    if ! wget "${iosgods_url2}" -O "${iosgods_binary}"; then
                        printf "\\n\\nDownload failed. Please manually thin/patch your binary using the tutorials on iOSGods.com. If your device is x32-bit, thinning/patching isn't required. If your device is x64-bit thinning/patching is required for this hack to work.\\n\\n"
                        exit 0
                    fi
                fi
				
                ig_mv_perms
		
                ;;
        esac
        ;;
    abort-upgrade|abort-deconfigure|abort-remove)
        ;;
    *)
        printf "%s\\n" "${0} called with unknown argument \`${1}'" 1>&2
        exit 1
        ;;
esac
